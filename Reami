/* Переменные и их типы.
Переменные хранят данные.
Типы указываються перед название переменных, от типа данных завити содержимое переменной.
При объявлении определенного типа данных для переммной, нельза изменить её тип вдальнейшем. В ходе прогаммы можно перезаписывать данные переменной, но тип должен оставться неизменным
Типы данных:
    целые числа:
    byte -  от -128 до 127
    short - от -32 768 до 32 767
    int - от -2 147 483 648 до 2 147 483 647
    long - от -9 223 372 036 854 до 9 223 372 036 854 807

    числа с точкой:
    float - от -3.4*10^38 до 3.4*10^38
    double - от +-4.9*10^-324 до +-1.8*10^308

    прочие:
    boolean - true / false
    char - символы, в 'одинарные кавычки'
    string - текст, в "двойные кавычки, одно или множество слов"

Создание переменной:
    int a = 0; // Добавление значения сразу
    byte c; // Создание переменной без значения
    short b, y = 342; // Создание нескольких переменных

Вызов переменной:
Обратиться к ней по имени.
Чтобы записать данные в переменную с типом float или double необходимо после числа дописать букву f или d соответсвенно.
 */

/* Данные от пользователя.
За пользовательский ввод данных с клавиатуры отвечает класс Scanner
Перед использованием классов их изначально необходимо импортировать в самом верху файла. После импорта вы можете работать с классами, используя их функции и значения.
    import java.util.Scanner;
Далее необходимо создать объект (экземпляр) класса Scanner.
Экземпляр - это объект класса, который наследует все методы и переменные класса. Про классы и объекты мы еще детально будем говорить в теме ООП.
    Scanner some_name = new Scanner(System.in); // Создаем объект с именем some_name
Чтобы получить данные от пользователя мы используем метод класса:
    int val = some_name.nextInt ();
Несколько основных методов:
    nextLine () - для ввода строки. Возвращаемый тип данных String;
    nextInt () - для ввода целых чисел. Возвращаемый тип данных int;
    nextFloat () - для ввода чисел с плавающей точкой. Возвращаемый тип данных float;
    nextDouble () - для ввода больших чисел с плавающей точкой. Возвращаемый тип double.
*/

/* Математические операции.
Вычисление. По аналогии с математикой.
Если операция проходит над одной и той же переменной, то можно запись сократить:
    z = z + 20;
    z += 20; // Эта запись аналогична той, что находиться выше
Если нам необходимо увеличить или уменьшить число на 1, то мы можем прописать ++ и -- соответсвенно:
    z = 10;
    z += 1;
    z++; // Аналогично тому, что прописано выше

Сравнение. По аналогии с математикой.
>; <; >=; <=; ==; !=;
*/

/* Условные операторы.
Конструкция if - else:
    int a = 2, b = 10;
    if (a == b) { // Если a будет равным b, тогда будет выполнен код
    	// Здесь код что будет выполнен
    	// Если все одна строка кода, то фигурные скобки {}
    	// можно не ставить
    } else if (a <= b) { // Если а будет меньшим или равным b
    	// Если предыдущее условие не будет выполнено,
    	// а здесь условие окажется верным,
    	// то будет выполнен этот код
    } else {
    	// Этот код сработает, если другие условия не будет выполнены
    }
Можно прописать структуру лишь с одним условием if, а можно дописать в неё сколько-угодно вложенных условий else if.
Внутри каждого из условий можно прописывать другие конструкции if else, что будут проверять новые выражения.

Если необходимо проверить несколько условий в одном операторе, то можно воспользоваться логическим «и» или же логическим «или»:
    if (a != b && a > b) {
    	// Код будет выполнен, если и первое, и второе условие
    	// окажутся верными
    }

    if (a < b || a == b) {
    	// Код будет выполнен, если или первое, или второе условие
    	// окажется верным
    }
Конструкция switch:
Конструкция case обладает более удобным форматом для проверки множественных условий на совпадение значения. В конструкцию записывается переменная, что проверяется, а также значения на которые происходит проверка.
    int x = 23;
    switch (x) { // Проверяем переменную x
	    case 1: // Если переменная будет равна 1, то здесь сработает код
		// Может быть множество строк, а не только одна
		System.out.print ("Переменная равна 1");
		break; // Указываем конец для кода для этой проверки
	    case 56: // Если переменная будет равна 56, то здесь сработает код
		// Может быть множество строк, а не только одна
		System.out.print ("Переменная равна 56");
		break; // Указываем конец для кода для этой проверки

	// По аналогии таких проверок может быть множество
	// Также можно добавить проверку, которая сработает в случае
	// если все остальные проверки не сработают
	    default:
		System.out.print ("Что-то другое");
		break; // Можно и не ставить, так как это последние условие
}
Тернарная операция:
Это сокращенная форма if else. Записывается следующим образом:
    int x = 3, a = 12;
    int res = x < a ? (x + a) : (x - a);
    System.out.println(res);
Мы проверяем, если "x" будет меньше за "a", то мы в переменную res устанавливаем их сумму, иначе - их разницу.
*/

/*Циклы.
Цикл For
В цикле for все условия записываются в одном месте, что очень удобно во многих случаях. Стандартная запись такого цикла выглядит следующим образом:
   for (int i = 0; i < 10; i++)
   	System.out.println(i);
В объявлении цикла записывается следующее: переменная цикла, её начальное значение и диапазон. В примере выше будут выведены числа от 0 до 10.
Если в теле цикла всего одна строка кода, то фигурные скобки можно пропустить и не записывать их.

Цикл While
Суть цикла while не особо отличается от цикла for. Единственное отличие заключается в способе записи цикла. В while необходимо прописать лишь условие, а все остальные параметры записываются вне цикла:
    int i = 1; // Создание переменной
    while (i <= 10) { // Здесь только условие
    	System.out.println(i);
    	i++; // Увеличение переменной

Цикл Do While
Цикл схож с циклом while по форме написания, но при этом работает немного по-другому. Цикл do..while будет выполнен один раз сто процентов, а дальше проверит условие и если оно верно, то цикл будет выполняться дальше:
    int x = 13;
    do {
	    x--;
	    System.out.println(x);
    } while (x > 10);

Операторы для работы в циклах

Существует три основных оператора для работы в циклах:

    Оператор break - служит для выхода из цикла полностью;
    Оператор return - выполняет ту же функцию, что и оператор break, но  для циклов лучше использовать break;
    Оператор continue - пропускает лишь одну итерацию и не выходит из цикла.
*/

/*Массивы. Одномерные.
Чтобы создать массив необходимо указать тип данных, поставить квадратные скобки и назвать сам массив. Это очень схоже с созданием обычных переменных, но здесь после типа данных идут еще квадратные скобки.
В массивах отсчет начинается с 0, поэтому первый элемент по индексу будет равен 0, второй - 1 и так далее.
    char[] stroka; // Создание пустого массива
    int numbers[]; // Не будет считаться ошибкой

    int[] nums = new int[4];
    nums[0] = 1; // Добавление элементов в массив из 4 элементов

    int[] nums2 = new int[] { 1, 2, 3, 5 }; // Присвоение всех значений сразу
Работать с элементами массива можно точно как с переменными. Мы можем их выводить или же устанавливать для них новые значения.

Для массивов существует несколько дополнительных методов, что позволяют проводить действия над массивом. Рассмотрим несколько из них:

    length - возвращает количество элементов в массиве. К примеру, создадим массив
        arr и укажем для него 3 элемента. При вызове функции будет выдано число 3:
            arr.length;
    Arrays.copyOf - копирует один массив в другой:
        int[] arr = new int[] { 1, 2, 3, 5 };
        int[] some_new = Arrays.copyOf(arr, arr.length);
    Arrays.sort - сортировка массива:
        int[] numbers = new int[] { 1, 7, 3, 5, 2, 6, 4 };
        Arrays.sort(numbers);
*/

/* Многомерные массивы. Двумерные.
Многомерный массив - это массив, в котором каждый элемент является другим массивом.
Для создания двумерных массивов необходимо использовать двойные квадратные скобки после типа данных.
    int[][] x = { { 0, 34, 2 }, { 3, 4, 5 } };
Мы видим, что элементы первого массива являются другими массивами. Чтобы выбрать какой-либо объект используйте ту же структуру что и для одномерных массивов, вот только теперь указывайте индекс как первого массива, так и второго:
    x[0][1] = 1; // Вместо 34 теперь будет 1
*/

/* Функции. Методы.
Функции можно назвать небольшими подпрограммами, куда можно вынести повторяющийся код и обращаться к нему, когда это будет нужно.
Функции что записаны вне классов называют функциями, а функции что записаны внутри классов называются методами.
Точно такая же ситуация обстоит с переменным. В классах переменные называются полями, а вне классов - переменными.
Для создания функций необходимо указать возвращаемый тип данных, указать название и параметры. В случае когда функция ничего не возвращает, то указывается тип данных void.
Перед типом данных всегда прописывается модификатор доступа.
Поскольку мы хотим обращаться к функциям напрямую без создания объекта, то мы прописываем ключевое слово static.
Оно говорит компилятору что функция принадлежит всему классу, а не конкретным объектам.
Создание функции:
   public static void test () {
   	System.out.print("Вывод чего-либо в консоль");
   }
Функция выше не принимает никаких параметров и ничего не возвращает. Она просто пишет слово в консоль.

Добавим параметр:
   public static void test (String word) {
   	System.out.print(word);
   }

Если функция должна что-либо вернуть, то прописываем тип данных который будет возвращен.
Для возвращения данных используем ключевое слово return:
    public static double test (double some_number) {
    	some_number *= 2;
    	return some_number;
    }
*/

/* Основы ООП (основные концепуии ООП).
4 концепции ООП: полиморфизм, абстракция, инкапсуляция и наследование.
    полиморфизм - переодределение данных
    абстракция - описание лишь скелета объекта без реализации
    инкапсуляция -  защита данных от внешнего доступа к ним
    наследование - возможность наследовать данные из классов-родителей

Экземпляр - объект класса, некая область памяти, которая вмещает в себе все характеристики взятые из класса: поля, методы, конструкторы.
У одного класса может быть бесконечное количество объектов (экземпляров).
*/

